# Import required libraries
import pandas as pd
import dash
from dash import html, dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the SpaceX launch data into a pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")  # Load the data here

# Get the max and min payload values for the range slider
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a Dash application
app = dash.Dash(__name__)

# Extract unique launch sites from spacex_df
launch_sites = spacex_df['Launch Site'].unique()

# Create the dropdown component for site selection
site_dropdown = dcc.Dropdown(
    id='site-dropdown',
    options=[{'label': 'All Sites', 'value': 'ALL'}] +
            [{'label': site, 'value': site} for site in launch_sites],
    value='ALL',  # Default selected value
    placeholder="Select a Launch Site here",
    searchable=True  # Make it searchable
)

# Create the RangeSlider component for payload selection
payload_slider = dcc.RangeSlider(
    id='payload-slider',
    min=int(min_payload),  # Cast to integer
    max=int(max_payload),  # Cast to integer
    step=1000,
    marks={i: f'{i} Kg' for i in range(int(min_payload), int(max_payload) + 1000, 2500)},  # Cast to integer in range()
    value=[min_payload, max_payload]  # Default range
)

# Create the layout of the app
app.layout = html.Div(children=[
    html.H1('SpaceX Launch Records Dashboard',
            style={'textAlign': 'center', 'color': '#503D36', 'font-size': 40}),
    html.Br(),

    # Task 1: Dropdown for selecting launch site
    site_dropdown,

    html.Br(),

    # Task 2: Pie chart for success vs failure launches
    html.Div(dcc.Graph(id='success-pie-chart')),

    html.Br(),

    html.P("Payload range (Kg):"),
    payload_slider,  # Payload range slider

    # Task 4: Scatter chart to show correlation between payload and launch success
    html.Div(dcc.Graph(id='success-payload-scatter-chart')),
])

# Task 2: Callback for the pie chart
@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='site-dropdown', component_property='value')
)
def get_pie_chart(entered_site):
    if entered_site == 'ALL':
        # Use all data to show total success launches
        fig = px.pie(
            spacex_df,
            names='class',  # 'class' column contains 0 (failure) and 1 (success)
            title='Total Successful Launches for All Sites'
        )
    else:
        # Filter data for the selected launch site
        filtered_df = spacex_df[spacex_df['Launch Site'] == entered_site]
        
        # Create a pie chart for success vs failure count
        fig = px.pie(
            filtered_df,
            names='class',  # 'class' column distinguishes success (1) and failure (0)
            title=f'Success vs. Failure Launches for {entered_site}'
        )

    return fig  # Return the figure to update the graph


# Task 4: Callback for the scatter plot (payload vs success)
@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'),
    [Input(component_id='site-dropdown', component_property='value'),
     Input(component_id='payload-slider', component_property='value')]
)
def get_scatter_chart(entered_site, payload_range):
    # Filter data based on payload range
    filtered_df = spacex_df[
        (spacex_df['Payload Mass (kg)'] >= payload_range[0]) &
        (spacex_df['Payload Mass (kg)'] <= payload_range[1])
    ]

    if entered_site == 'ALL':
        # Scatter plot for all sites
        fig = px.scatter(
            filtered_df,
            x='Payload Mass (kg)',
            y='class',
            color='Booster Version Category',
            title='Correlation Between Payload and Success for All Sites',
            hover_data=['Launch Site']
        )
    else:
        # Filter data for the selected launch site
        filtered_df = filtered_df[filtered_df['Launch Site'] == entered_site]

        # Scatter plot for the selected site
        fig = px.scatter(
            filtered_df,
            x='Payload Mass (kg)',
            y='class',
            color='Booster Version Category',
            title=f'Correlation Between Payload and Success for {entered_site}',
            hover_data=['Launch Site']
        )

    return fig  # Return the figure to update the graph


# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
